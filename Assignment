interface Shape {
    void draw();
}

interface TwoDShape extends Shape {
    double area();
    double perimeter();
}

interface ThreeDShape extends Shape {
    double surfaceArea();
    double volume();
}

class Rectangle implements TwoDShape {
    private double length;
    private double width;

    public Rectangle(double length, double width) {
        this.length = length;
        this.width = width;
    }

    @Override
    public void draw() {
        System.out.println("Drawing a rectangle");
    }

    @Override
    public double area() {
        return length * width;
    }

    @Override
    public double perimeter() {
        return 2 * (length + width);
    }
}

class Circle implements TwoDShape {
    private double radius;

    public Circle(double radius) {
        this.radius = radius;
    }

    @Override
    public void draw() {
        System.out.println("Drawing a circle");
    }

    @Override
    public double area() {
        return Math.PI * radius * radius;
    }

    @Override
    public double perimeter() {
        return 2 * Math.PI * radius;
    }
}

class Cube implements ThreeDShape {
    private double side;

    public Cube(double side) {
        this.side = side;
    }

    @Override
    public void draw() {
        System.out.println("Drawing a cube");
    }

    @Override
    public double surfaceArea() {
        return 6 * side * side;
    }

    @Override
    public double volume() {
        return side * side * side;
    }
}

class Cylinder implements ThreeDShape {
    private double radius;
    private double height;

    public Cylinder(double radius, double height) {
        this.radius = radius;
        this.height = height;
    }

    @Override
    public void draw() {
        System.out.println("Drawing a cylinder");
    }

    @Override
    public double surfaceArea() {
        return 2 * Math.PI * radius * (radius + height);
    }

    @Override
    public double volume() {
        return Math.PI * radius * radius * height;
    }
}

public class Main {
    public static void main(String[] args) {
        Rectangle rectangle = new Rectangle(5, 10);
        Circle circle = new Circle(7);
        Cube cube = new Cube(4);
        Cylinder cylinder = new Cylinder(3, 8);

        rectangle.draw();
        System.out.println("Area: " + rectangle.area());
        System.out.println("Perimeter: " + rectangle.perimeter());

        circle.draw();
        System.out.println("Area: " + circle.area());
        System.out.println("Perimeter: " + circle.perimeter());

        cube.draw();
        System.out.println("Surface Area: " + cube.surfaceArea());
        System.out.println("Volume: " + cube.volume());

        cylinder.draw();
        System.out.println("Surface Area: " + cylinder.surfaceArea());
        System.out.println("Volume: " + cylinder.volume());
    }
}



threads- import java.util.Random;

class RandomNumberGenerator implements Runnable {
    private Random random;
    private volatile boolean running;

    public RandomNumberGenerator() {
        random = new Random();
        running = true;
    }

    @Override
    public void run() {
        while (running) {
            try {
                Thread.sleep(1000); // Wait for 1 second
                int randomNumber = random.nextInt(Integer.MAX_VALUE) + 1;
                System.out.println("Generated number: " + randomNumber);

                if (randomNumber % 2 == 0) {
                    Thread evenThread = new Thread(new EvenNumberPrinter(randomNumber));
                    evenThread.start();
                    evenThread.join();
                } else {
                    Thread oddThread = new Thread(new OddNumberPrinter(randomNumber));
                    oddThread.start();
                    oddThread.join();
                }
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }

    public void stop() {
        running = false;
    }
}

class EvenNumberPrinter implements Runnable {
    private int number;

    public EvenNumberPrinter(int number) {
        this.number = number;
    }

    @Override
    public void run() {
        System.out.println("Even numbers up to " + number + ":");
        for (int i = 1; i <= number; i++) {
            if (i % 2 == 0) {
                System.out.print(i + " ");
            }
        }
        System.out.println();
    }
}

class OddNumberPrinter implements Runnable {
    private int number;

    public OddNumberPrinter(int number) {
        this.number = number;
    }

    @Override
    public void run() {
        System.out.println("Odd numbers up to " + number + ":");
        for (int i = 1; i <= number; i++) {
            if (i % 2 != 0) {
                System.out.print(i + " ");
            }
        }
        System.out.println();
    }
}

public class Main {
    public static void main(String[] args) throws InterruptedException {
        Thread randomNumberGeneratorThread = new Thread(new RandomNumberGenerator());
        randomNumberGeneratorThread.start();

        // Run the program for 10 seconds
        Thread.sleep(10000);

        // Stop the random number generator thread
        RandomNumberGenerator randomNumberGenerator = (RandomNumberGenerator) randomNumberGeneratorThread.getRunnable();
        randomNumberGenerator.stop();
    }
}

